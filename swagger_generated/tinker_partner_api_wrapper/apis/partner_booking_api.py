# coding: utf-8

"""
    partner-api

    No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class PartnerBookingApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def partner_booking_airports(self, app_id, api_key, **kwargs):
        """
        Retrieves a list of all tinker-activated airports
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.partner_booking_airports(app_id, api_key, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str app_id: the partners appId (required)
        :param str api_key: the partners apiKey (required)
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.partner_booking_airports_with_http_info(app_id, api_key, **kwargs)
        else:
            (data) = self.partner_booking_airports_with_http_info(app_id, api_key, **kwargs)
            return data

    def partner_booking_airports_with_http_info(self, app_id, api_key, **kwargs):
        """
        Retrieves a list of all tinker-activated airports
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.partner_booking_airports_with_http_info(app_id, api_key, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str app_id: the partners appId (required)
        :param str api_key: the partners apiKey (required)
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['app_id', 'api_key']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method partner_booking_airports" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'app_id' is set
        if ('app_id' not in params) or (params['app_id'] is None):
            raise ValueError("Missing the required parameter `app_id` when calling `partner_booking_airports`")
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params) or (params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `partner_booking_airports`")

        resource_path = '/v2/partner/bookings/airports'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'app_id' in params:
            query_params['appId'] = params['app_id']
        if 'api_key' in params:
            query_params['apiKey'] = params['api_key']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='InlineResponse200',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def partner_booking_confirm(self, app_id, api_key, customer_id, price_quotes, **kwargs):
        """
        Confirm a previously created set of price quotes
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.partner_booking_confirm(app_id, api_key, customer_id, price_quotes, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str app_id: the partners appId (required)
        :param str api_key: the partners apiKey (required)
        :param float customer_id: The id of a newly created customer of the customers endpoint (required)
        :param str price_quotes: A list of price quote objects: [ {quoteId: Number, flightNumber: String} ] (required)
        :param str comment: An optional comment
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.partner_booking_confirm_with_http_info(app_id, api_key, customer_id, price_quotes, **kwargs)
        else:
            (data) = self.partner_booking_confirm_with_http_info(app_id, api_key, customer_id, price_quotes, **kwargs)
            return data

    def partner_booking_confirm_with_http_info(self, app_id, api_key, customer_id, price_quotes, **kwargs):
        """
        Confirm a previously created set of price quotes
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.partner_booking_confirm_with_http_info(app_id, api_key, customer_id, price_quotes, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str app_id: the partners appId (required)
        :param str api_key: the partners apiKey (required)
        :param float customer_id: The id of a newly created customer of the customers endpoint (required)
        :param str price_quotes: A list of price quote objects: [ {quoteId: Number, flightNumber: String} ] (required)
        :param str comment: An optional comment
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['app_id', 'api_key', 'customer_id', 'price_quotes', 'comment']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method partner_booking_confirm" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'app_id' is set
        if ('app_id' not in params) or (params['app_id'] is None):
            raise ValueError("Missing the required parameter `app_id` when calling `partner_booking_confirm`")
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params) or (params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `partner_booking_confirm`")
        # verify the required parameter 'customer_id' is set
        if ('customer_id' not in params) or (params['customer_id'] is None):
            raise ValueError("Missing the required parameter `customer_id` when calling `partner_booking_confirm`")
        # verify the required parameter 'price_quotes' is set
        if ('price_quotes' not in params) or (params['price_quotes'] is None):
            raise ValueError("Missing the required parameter `price_quotes` when calling `partner_booking_confirm`")

        resource_path = '/v2/partner/bookings/confirm'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'app_id' in params:
            form_params.append(('appId', params['app_id']))
        if 'api_key' in params:
            form_params.append(('apiKey', params['api_key']))
        if 'customer_id' in params:
            form_params.append(('customerId', params['customer_id']))
        if 'price_quotes' in params:
            form_params.append(('priceQuotes', params['price_quotes']))
        if 'comment' in params:
            form_params.append(('comment', params['comment']))

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='InlineResponse200',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def partner_booking_locations(self, app_id, api_key, country, city, street, **kwargs):
        """
        Retrieves a geoloc-id for a given location
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.partner_booking_locations(app_id, api_key, country, city, street, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str app_id: the partners appId (required)
        :param str api_key: the partners apiKey (required)
        :param str country: ISO 3166 alpha 2 country code (required)
        :param str city: City name (required)
        :param str street: Street name (required)
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.partner_booking_locations_with_http_info(app_id, api_key, country, city, street, **kwargs)
        else:
            (data) = self.partner_booking_locations_with_http_info(app_id, api_key, country, city, street, **kwargs)
            return data

    def partner_booking_locations_with_http_info(self, app_id, api_key, country, city, street, **kwargs):
        """
        Retrieves a geoloc-id for a given location
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.partner_booking_locations_with_http_info(app_id, api_key, country, city, street, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str app_id: the partners appId (required)
        :param str api_key: the partners apiKey (required)
        :param str country: ISO 3166 alpha 2 country code (required)
        :param str city: City name (required)
        :param str street: Street name (required)
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['app_id', 'api_key', 'country', 'city', 'street']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method partner_booking_locations" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'app_id' is set
        if ('app_id' not in params) or (params['app_id'] is None):
            raise ValueError("Missing the required parameter `app_id` when calling `partner_booking_locations`")
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params) or (params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `partner_booking_locations`")
        # verify the required parameter 'country' is set
        if ('country' not in params) or (params['country'] is None):
            raise ValueError("Missing the required parameter `country` when calling `partner_booking_locations`")
        # verify the required parameter 'city' is set
        if ('city' not in params) or (params['city'] is None):
            raise ValueError("Missing the required parameter `city` when calling `partner_booking_locations`")
        # verify the required parameter 'street' is set
        if ('street' not in params) or (params['street'] is None):
            raise ValueError("Missing the required parameter `street` when calling `partner_booking_locations`")

        resource_path = '/v2/partner/bookings/locations'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'app_id' in params:
            query_params['appId'] = params['app_id']
        if 'api_key' in params:
            query_params['apiKey'] = params['api_key']
        if 'country' in params:
            query_params['country'] = params['country']
        if 'city' in params:
            query_params['city'] = params['city']
        if 'street' in params:
            query_params['street'] = params['street']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='InlineResponse200',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def partner_booking_request_from_airport_booking(self, app_id, api_key, passengers, checkin_luggage, airport_geoloc, location_geoloc, location_number, plane_landing_time, **kwargs):
        """
        Request a price quote for a trip starting FROM an airport.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.partner_booking_request_from_airport_booking(app_id, api_key, passengers, checkin_luggage, airport_geoloc, location_geoloc, location_number, plane_landing_time, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str app_id: the partners appId (required)
        :param str api_key: the partners apiKey (required)
        :param str passengers: Passengers definition There are three types of passengers available:  [A]dult, [B]aby and [C]hild A valid definition would be: A1B1C0 for example Regular expression: ^A[0-8]B[0-8]C[0-8]$ (required)
        :param float checkin_luggage: the number of checkin luggage pieces (required)
        :param float airport_geoloc: the geoloc for the airport, obtained from the airports endpoint (required)
        :param float location_geoloc: the geoloc for a location, obtained from the locations endpoint (required)
        :param str location_number: the house number (incl. extensions) for the location (required)
        :param str plane_landing_time: The date-time the plane will land Regular expression: /^20[1-9]{2}-((0[1-9])|(1[0-2]))-((0[1-9])|([12][0-9])|(3[01])) (([01][0-9])|(2[0-3])):(00|30):00$/ (required)
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.partner_booking_request_from_airport_booking_with_http_info(app_id, api_key, passengers, checkin_luggage, airport_geoloc, location_geoloc, location_number, plane_landing_time, **kwargs)
        else:
            (data) = self.partner_booking_request_from_airport_booking_with_http_info(app_id, api_key, passengers, checkin_luggage, airport_geoloc, location_geoloc, location_number, plane_landing_time, **kwargs)
            return data

    def partner_booking_request_from_airport_booking_with_http_info(self, app_id, api_key, passengers, checkin_luggage, airport_geoloc, location_geoloc, location_number, plane_landing_time, **kwargs):
        """
        Request a price quote for a trip starting FROM an airport.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.partner_booking_request_from_airport_booking_with_http_info(app_id, api_key, passengers, checkin_luggage, airport_geoloc, location_geoloc, location_number, plane_landing_time, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str app_id: the partners appId (required)
        :param str api_key: the partners apiKey (required)
        :param str passengers: Passengers definition There are three types of passengers available:  [A]dult, [B]aby and [C]hild A valid definition would be: A1B1C0 for example Regular expression: ^A[0-8]B[0-8]C[0-8]$ (required)
        :param float checkin_luggage: the number of checkin luggage pieces (required)
        :param float airport_geoloc: the geoloc for the airport, obtained from the airports endpoint (required)
        :param float location_geoloc: the geoloc for a location, obtained from the locations endpoint (required)
        :param str location_number: the house number (incl. extensions) for the location (required)
        :param str plane_landing_time: The date-time the plane will land Regular expression: /^20[1-9]{2}-((0[1-9])|(1[0-2]))-((0[1-9])|([12][0-9])|(3[01])) (([01][0-9])|(2[0-3])):(00|30):00$/ (required)
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['app_id', 'api_key', 'passengers', 'checkin_luggage', 'airport_geoloc', 'location_geoloc', 'location_number', 'plane_landing_time']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method partner_booking_request_from_airport_booking" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'app_id' is set
        if ('app_id' not in params) or (params['app_id'] is None):
            raise ValueError("Missing the required parameter `app_id` when calling `partner_booking_request_from_airport_booking`")
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params) or (params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `partner_booking_request_from_airport_booking`")
        # verify the required parameter 'passengers' is set
        if ('passengers' not in params) or (params['passengers'] is None):
            raise ValueError("Missing the required parameter `passengers` when calling `partner_booking_request_from_airport_booking`")
        # verify the required parameter 'checkin_luggage' is set
        if ('checkin_luggage' not in params) or (params['checkin_luggage'] is None):
            raise ValueError("Missing the required parameter `checkin_luggage` when calling `partner_booking_request_from_airport_booking`")
        # verify the required parameter 'airport_geoloc' is set
        if ('airport_geoloc' not in params) or (params['airport_geoloc'] is None):
            raise ValueError("Missing the required parameter `airport_geoloc` when calling `partner_booking_request_from_airport_booking`")
        # verify the required parameter 'location_geoloc' is set
        if ('location_geoloc' not in params) or (params['location_geoloc'] is None):
            raise ValueError("Missing the required parameter `location_geoloc` when calling `partner_booking_request_from_airport_booking`")
        # verify the required parameter 'location_number' is set
        if ('location_number' not in params) or (params['location_number'] is None):
            raise ValueError("Missing the required parameter `location_number` when calling `partner_booking_request_from_airport_booking`")
        # verify the required parameter 'plane_landing_time' is set
        if ('plane_landing_time' not in params) or (params['plane_landing_time'] is None):
            raise ValueError("Missing the required parameter `plane_landing_time` when calling `partner_booking_request_from_airport_booking`")

        resource_path = '/v2/partner/bookings/from/airport'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'app_id' in params:
            form_params.append(('appId', params['app_id']))
        if 'api_key' in params:
            form_params.append(('apiKey', params['api_key']))
        if 'passengers' in params:
            form_params.append(('passengers', params['passengers']))
        if 'checkin_luggage' in params:
            form_params.append(('checkinLuggage', params['checkin_luggage']))
        if 'airport_geoloc' in params:
            form_params.append(('airportGeoloc', params['airport_geoloc']))
        if 'location_geoloc' in params:
            form_params.append(('locationGeoloc', params['location_geoloc']))
        if 'location_number' in params:
            form_params.append(('locationNumber', params['location_number']))
        if 'plane_landing_time' in params:
            form_params.append(('planeLandingTime', params['plane_landing_time']))

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='InlineResponse200',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def partner_booking_request_to_airport_booking(self, app_id, api_key, passengers, checkin_luggage, airport_geoloc, location_geoloc, location_number, airport_arrival_time, **kwargs):
        """
        Request a price quote for a trip TO an airport
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.partner_booking_request_to_airport_booking(app_id, api_key, passengers, checkin_luggage, airport_geoloc, location_geoloc, location_number, airport_arrival_time, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str app_id: the partners appId (required)
        :param str api_key: the partners apiKey (required)
        :param str passengers: Passengers definition There are three types of passengers available:  [A]dult, [B]aby and [C]hild A valid definition would be: A1B1C0 for example Regular expression: ^A[0-8]B[0-8]C[0-8]$ (required)
        :param float checkin_luggage: the number of checkin luggage pieces (required)
        :param float airport_geoloc: the geoloc for the airport, obtained from the airports endpoint (required)
        :param float location_geoloc: the geoloc for a location, obtained from the locations endpoint (required)
        :param str location_number: the house number (incl. extensions) for the location (required)
        :param str airport_arrival_time: The date-time the passenger desires to be at the airport Regular expression: /^20[1-9]{2}-((0[1-9])|(1[0-2]))-((0[1-9])|([12][0-9])|(3[01])) (([01][0-9])|(2[0-3])):(00|30):00$/ (required)
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.partner_booking_request_to_airport_booking_with_http_info(app_id, api_key, passengers, checkin_luggage, airport_geoloc, location_geoloc, location_number, airport_arrival_time, **kwargs)
        else:
            (data) = self.partner_booking_request_to_airport_booking_with_http_info(app_id, api_key, passengers, checkin_luggage, airport_geoloc, location_geoloc, location_number, airport_arrival_time, **kwargs)
            return data

    def partner_booking_request_to_airport_booking_with_http_info(self, app_id, api_key, passengers, checkin_luggage, airport_geoloc, location_geoloc, location_number, airport_arrival_time, **kwargs):
        """
        Request a price quote for a trip TO an airport
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.partner_booking_request_to_airport_booking_with_http_info(app_id, api_key, passengers, checkin_luggage, airport_geoloc, location_geoloc, location_number, airport_arrival_time, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str app_id: the partners appId (required)
        :param str api_key: the partners apiKey (required)
        :param str passengers: Passengers definition There are three types of passengers available:  [A]dult, [B]aby and [C]hild A valid definition would be: A1B1C0 for example Regular expression: ^A[0-8]B[0-8]C[0-8]$ (required)
        :param float checkin_luggage: the number of checkin luggage pieces (required)
        :param float airport_geoloc: the geoloc for the airport, obtained from the airports endpoint (required)
        :param float location_geoloc: the geoloc for a location, obtained from the locations endpoint (required)
        :param str location_number: the house number (incl. extensions) for the location (required)
        :param str airport_arrival_time: The date-time the passenger desires to be at the airport Regular expression: /^20[1-9]{2}-((0[1-9])|(1[0-2]))-((0[1-9])|([12][0-9])|(3[01])) (([01][0-9])|(2[0-3])):(00|30):00$/ (required)
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['app_id', 'api_key', 'passengers', 'checkin_luggage', 'airport_geoloc', 'location_geoloc', 'location_number', 'airport_arrival_time']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method partner_booking_request_to_airport_booking" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'app_id' is set
        if ('app_id' not in params) or (params['app_id'] is None):
            raise ValueError("Missing the required parameter `app_id` when calling `partner_booking_request_to_airport_booking`")
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params) or (params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `partner_booking_request_to_airport_booking`")
        # verify the required parameter 'passengers' is set
        if ('passengers' not in params) or (params['passengers'] is None):
            raise ValueError("Missing the required parameter `passengers` when calling `partner_booking_request_to_airport_booking`")
        # verify the required parameter 'checkin_luggage' is set
        if ('checkin_luggage' not in params) or (params['checkin_luggage'] is None):
            raise ValueError("Missing the required parameter `checkin_luggage` when calling `partner_booking_request_to_airport_booking`")
        # verify the required parameter 'airport_geoloc' is set
        if ('airport_geoloc' not in params) or (params['airport_geoloc'] is None):
            raise ValueError("Missing the required parameter `airport_geoloc` when calling `partner_booking_request_to_airport_booking`")
        # verify the required parameter 'location_geoloc' is set
        if ('location_geoloc' not in params) or (params['location_geoloc'] is None):
            raise ValueError("Missing the required parameter `location_geoloc` when calling `partner_booking_request_to_airport_booking`")
        # verify the required parameter 'location_number' is set
        if ('location_number' not in params) or (params['location_number'] is None):
            raise ValueError("Missing the required parameter `location_number` when calling `partner_booking_request_to_airport_booking`")
        # verify the required parameter 'airport_arrival_time' is set
        if ('airport_arrival_time' not in params) or (params['airport_arrival_time'] is None):
            raise ValueError("Missing the required parameter `airport_arrival_time` when calling `partner_booking_request_to_airport_booking`")

        resource_path = '/v2/partner/bookings/to/airport'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'app_id' in params:
            form_params.append(('appId', params['app_id']))
        if 'api_key' in params:
            form_params.append(('apiKey', params['api_key']))
        if 'passengers' in params:
            form_params.append(('passengers', params['passengers']))
        if 'checkin_luggage' in params:
            form_params.append(('checkinLuggage', params['checkin_luggage']))
        if 'airport_geoloc' in params:
            form_params.append(('airportGeoloc', params['airport_geoloc']))
        if 'location_geoloc' in params:
            form_params.append(('locationGeoloc', params['location_geoloc']))
        if 'location_number' in params:
            form_params.append(('locationNumber', params['location_number']))
        if 'airport_arrival_time' in params:
            form_params.append(('airportArrivalTime', params['airport_arrival_time']))

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='InlineResponse200',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))
