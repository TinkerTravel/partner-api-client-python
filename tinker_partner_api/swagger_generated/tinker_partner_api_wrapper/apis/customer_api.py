# coding: utf-8

"""
    partner-api

    No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class CustomerApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def customer_new_customer(self, app_id, api_key, email, gender, language, phone_country_code, phone, first_name, last_name, **kwargs):
        """
        Create a Tinker Customer
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.customer_new_customer(app_id, api_key, email, gender, language, phone_country_code, phone, first_name, last_name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str app_id: the partners appId (required)
        :param str api_key: the partners apiKey (required)
        :param str email: Email address of the customer (required)
        :param str gender: Gender of the customer (M or F) (required)
        :param str language: ISO 3166 alpha 2 language code (required)
        :param str phone_country_code: Country code for the phone number (required)
        :param str phone: Phone number of the customer (required)
        :param str first_name: First name of the customer (required)
        :param str last_name: Last name of the customer (required)
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.customer_new_customer_with_http_info(app_id, api_key, email, gender, language, phone_country_code, phone, first_name, last_name, **kwargs)
        else:
            (data) = self.customer_new_customer_with_http_info(app_id, api_key, email, gender, language, phone_country_code, phone, first_name, last_name, **kwargs)
            return data

    def customer_new_customer_with_http_info(self, app_id, api_key, email, gender, language, phone_country_code, phone, first_name, last_name, **kwargs):
        """
        Create a Tinker Customer
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.customer_new_customer_with_http_info(app_id, api_key, email, gender, language, phone_country_code, phone, first_name, last_name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str app_id: the partners appId (required)
        :param str api_key: the partners apiKey (required)
        :param str email: Email address of the customer (required)
        :param str gender: Gender of the customer (M or F) (required)
        :param str language: ISO 3166 alpha 2 language code (required)
        :param str phone_country_code: Country code for the phone number (required)
        :param str phone: Phone number of the customer (required)
        :param str first_name: First name of the customer (required)
        :param str last_name: Last name of the customer (required)
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['app_id', 'api_key', 'email', 'gender', 'language', 'phone_country_code', 'phone', 'first_name', 'last_name']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method customer_new_customer" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'app_id' is set
        if ('app_id' not in params) or (params['app_id'] is None):
            raise ValueError("Missing the required parameter `app_id` when calling `customer_new_customer`")
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params) or (params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `customer_new_customer`")
        # verify the required parameter 'email' is set
        if ('email' not in params) or (params['email'] is None):
            raise ValueError("Missing the required parameter `email` when calling `customer_new_customer`")
        # verify the required parameter 'gender' is set
        if ('gender' not in params) or (params['gender'] is None):
            raise ValueError("Missing the required parameter `gender` when calling `customer_new_customer`")
        # verify the required parameter 'language' is set
        if ('language' not in params) or (params['language'] is None):
            raise ValueError("Missing the required parameter `language` when calling `customer_new_customer`")
        # verify the required parameter 'phone_country_code' is set
        if ('phone_country_code' not in params) or (params['phone_country_code'] is None):
            raise ValueError("Missing the required parameter `phone_country_code` when calling `customer_new_customer`")
        # verify the required parameter 'phone' is set
        if ('phone' not in params) or (params['phone'] is None):
            raise ValueError("Missing the required parameter `phone` when calling `customer_new_customer`")
        # verify the required parameter 'first_name' is set
        if ('first_name' not in params) or (params['first_name'] is None):
            raise ValueError("Missing the required parameter `first_name` when calling `customer_new_customer`")
        # verify the required parameter 'last_name' is set
        if ('last_name' not in params) or (params['last_name'] is None):
            raise ValueError("Missing the required parameter `last_name` when calling `customer_new_customer`")

        resource_path = '/v2/partner/customers'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'app_id' in params:
            form_params.append(('appId', params['app_id']))
        if 'api_key' in params:
            form_params.append(('apiKey', params['api_key']))
        if 'email' in params:
            form_params.append(('email', params['email']))
        if 'gender' in params:
            form_params.append(('gender', params['gender']))
        if 'language' in params:
            form_params.append(('language', params['language']))
        if 'phone_country_code' in params:
            form_params.append(('phoneCountryCode', params['phone_country_code']))
        if 'phone' in params:
            form_params.append(('phone', params['phone']))
        if 'first_name' in params:
            form_params.append(('firstName', params['first_name']))
        if 'last_name' in params:
            form_params.append(('lastName', params['last_name']))

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='InlineResponse200',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))
